// legacy plugins config; necessary to accomodate Java 6
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    if (JavaVersion.current().isJava7Compatible()) {
      classpath 'com.netflix.nebula:nebula-publishing-plugin:2.2.2'
    }
  }
}

// modern plugins config
plugins {
  id 'com.github.jruby-gradle.base' version '0.1.17'
  // Adding the nebula-publishing plugin when using JDK6 causes the build to abort
  //id 'nebula.nebula-publishing' version '2.0.0'
  id 'com.jfrog.bintray' version '1.0'
}

// TIP use -PpublishRelease=true to active release behavior regardless of the version
status = project.hasProperty('publishRelease') && project.publishRelease.toBoolean() ?
    'release' : ((version == 'unspecified' || version.endsWith('-SNAPSHOT')) ? 'snapshot' : 'release')

ext {
  buildDateTime = new Date()
  (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')
  statusIsRelease = (status == 'release')

  // jar versions
  arquillianVersion = '1.1.8.Final'
  arquillianSpockVersion = '1.0.0.Beta3'
  guavaVersion = '18.0'
  hamcrestVersion = '1.3'
  jcommanderVersion = '1.35'
  jrubyVersion = '1.7.20'
  jsoupVersion = '1.8.1'
  junitVersion = '4.12'
  saxonVersion = '9.5.1-6'
  xmlMatchersVersion = '1.0-RC1'

  // gem versions
  asciidoctorGemVersion = project.hasProperty('asciidoctorGemVersion') ? project.asciidoctorGemVersion : '1.5.2'
  asciidoctorEpub3GemVersion = project(':asciidoctorj-epub3').version.replace('-', '.')
  asciidoctorPdfGemVersion = project(':asciidoctorj-pdf').version.replace('-', '.')
  asciidoctorDiagramGemVersion = project(':asciidoctorj-diagram').version.replace('-', '.')
  coderayGemVersion = '1.1.0'
  groovyVersion = '2.1.8'
  erubisGemVersion = '2.7.0'
  hamlGemVersion = '4.0.5'
  openUriCachedGemVersion = '0.0.5'
  prawnGemVersion = '1.2.1'
  slimGemVersion = '2.0.3'
  spockVersion = '0.7-groovy-2.0'
  threadSafeGemVersion = '0.3.4'
  tiltGemVersion = '2.0.1'
  ttfunkGemVersion = '1.2.2'
}

allprojects {
  group = 'org.asciidoctor'
  defaultTasks 'check'
}

subprojects {
  // NOTE applying Java plugin changes the status; take steps to preserve value
  def _status = status
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply from: "$rootDir/gradle/providedConfiguration.gradle"
  status = _status

  // NOTE sourceCompatibility & targetCompatibility are set in gradle.properties to meet requirements of Gradle
  // Must redefine here to work around a bug in the Eclipse plugin
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_6

  repositories {
    if (project.hasProperty('useMavenLocal') && project.useMavenLocal.toBoolean()) {
      mavenLocal()
    }
    // QUESTION can we switch to jcenter() only?
    mavenCentral()
    maven {
      name 'rubygems-release'
      url 'http://rubygems-proxy.torquebox.org/releases'
    }
    maven {
      name 'rubygems-prerelease'
      url 'http://rubygems-proxy.torquebox.org/prereleases'
    }
  }
}

// apply Java and JRuby stuff for all subprojects except the distribution
configure(subprojects.findAll { !it.name.endsWith('-distribution') }) {
  dependencies {
    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile("org.spockframework:spock-core:$spockVersion") {
      exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
  }
  apply plugin: 'codenarc'
  codenarc {
    configFile = rootProject.file('config/codenarc/codenarc.groovy')
  }

  test {
    forkEvery = 10
    minHeapSize = '128m'
    maxHeapSize = '1024m'
    if (JavaVersion.current().isJava8Compatible()) {
      jvmArgs '-XX:-UseGCOverheadLimit'
    }
    else {
      jvmArgs '-XX:MaxPermSize=256m', '-XX:-UseGCOverheadLimit'
    }

    testLogging {
      // events 'passed', 'failed', 'skipped', 'standard_out', 'standard_error'
      // events 'standard_out', 'standard_error'
      afterSuite { desc, result ->
        if (!desc.parent && logger.infoEnabled) {
          logger.info "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        }
      }
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    javadoc {
      // Oracle JDK8 likes to fail the build over spoiled HTML
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes, group: 'Release') {
    description 'Assembles a jar archive containing the main source code.'
    from sourceSets.main.allSource
    classifier 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc, group: 'Release') {
    description 'Assembles a jar archive containing the Javadoc API documentation for the main source code.'
    from javadoc.destinationDir
    classifier 'javadoc'
  }

  // jcenter & Maven Central requires sources & javadoc jars (even if empty), so give 'em what they want
  artifacts {
    archives sourcesJar, javadocJar
  }

  apply plugin: 'com.github.jruby-gradle.base'

  jruby {
    defaultRepositories = false
    defaultVersion = jrubyVersion
    // TODO I'd like to be able to customize the name of the gemInstallDir
  }

  // QUESTION is this the right place to insert this task dependency in the lifecycle?
  // IMPORTANT The TMP or TEMP environment variable must be set for the gem install command to work on Windows
  processResources.dependsOn jrubyPrepareGems

  apply from: rootProject.file('gradle/eclipse.gradle')
  if (JavaVersion.current().isJava7Compatible()) {
    apply from: rootProject.file('gradle/publish.gradle')
  }
}

subprojects {
  if (JavaVersion.current().isJava7Compatible()) {
    apply from: rootProject.file('gradle/sign.gradle')
    apply from: rootProject.file('gradle/deploy.gradle')
  }
}

// disable bintrayUpload on root project to prevent build from failing
// NOTE seems to only get added when we use the modern plugin syntax
if (tasks.findByName(':bintrayUpload')) {
  bintrayUpload.enabled = false
}
